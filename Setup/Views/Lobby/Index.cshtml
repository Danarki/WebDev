@model WebDev.Models.ViewModels.LobbyViewModel
@inject IHttpContextAccessor Accessor

<div class="mt-2">
    <button id="connect">Connect</button>
    <button id="ping" onclick="getPlayers()">Ping</button>
    <button id="disconnect" onclick="disconnect()">Disconnect</button>
    Lobby
    @if (@Model.OwnerID == Accessor.HttpContext.Session.GetInt32("UserID"))
    {
        <div>
            <button onclick="DeleteRoom()">Delete room</button>
        </div>
    }
    <table class="table">
        <tr>
            <th>Gebruiker</th>
        </tr>
    </table>
</div>

<script src="~/js/lobby.js"></script>
<script>
    "use strict";

    console.log("init");

    var connection = new signalR.HubConnectionBuilder().withUrl('/signalr').build();

    async function disconnect() {
        try {
            await connection.invoke("RemoveFromRoom", @Model.RoomID);
        }
        catch (err) {
            console.log(err);
            setTimeout(ping, 5000);
        }
    }
    
    async function DeleteRoom(){
        try {
            await connection.invoke("DeleteRoom", "@Model.AdminToken");
        }
        catch (err) {
            console.log(err);
        }    
    }
    
    async function getPlayers() {
        try {
            await connection.invoke("GetGroupUsers", @Model.RoomID);
        }
        catch (err) {
            console.log(err);
            setTimeout(getPlayers, 5000);
        }
    }

    async function ping() {
        try {
            console.log(1);
            await connection.invoke("Ping", @Model.RoomID);
        }
        catch (err) {
            console.log(err);
            setTimeout(ping, 5000);
        }
    }

    async function start() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
            connection.invoke("AddToRoom", @Model.RoomID);
        } catch (err) {
            console.log(err);
            setTimeout(start, 500);
        }
    };

    connection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start();

    connection.on("receiveAdminToken", function (message) {
        adminToken = message;
    });
    
    connection.on("playerJoined", function (message) {
        console.log(message);
    });

    connection.on("playerList", function (message) {
        $('.table tr').not(':first').remove();
        var message = JSON.parse(message);
        var html = '';

        for(var i = 0; i < message.length; i++)
                    html += '<tr><td>' + message[i] + '</td></tr>';

        $('.table tr').first().after(html);

        console.log(message);
       // setTimeout(getPlayers, 500);
    });
    
    connection.on("playerLeft", function (message) {
        console.log(message);
    });

    connection.on("PingReturn", function (message) {
        console.log(message);
    });
</script>